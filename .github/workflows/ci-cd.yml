name: 'Task Management CI/CD Pipeline'

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - '.github/workflows/**'
      - 'Dockerfile*'
      - 'docker-compose.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - '.github/workflows/**' 
      - 'Dockerfile*'
      - 'docker-compose.yml'
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

jobs:
  build-and-test:
    name: Build and Test .NET Solution
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache .NET packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: |
        cd src
        dotnet restore TaskManagement.Domain/TaskManagement.Domain.csproj
        dotnet restore TaskManagement.Application/TaskManagement.Application.csproj
        dotnet restore TaskManagement.Infrastructure/TaskManagement.Infrastructure.csproj
        dotnet restore TaskManagement.API/TaskManagement.API.csproj
        dotnet restore TaskManagement.AuthService/TaskManagement.AuthService.csproj
        dotnet restore TaskManagement.ReminderService/TaskManagement.ReminderService.csproj
      
    - name: Build projects
      run: |
        cd src
        dotnet build TaskManagement.Domain/TaskManagement.Domain.csproj --configuration Release --no-restore
        dotnet build TaskManagement.Application/TaskManagement.Application.csproj --configuration Release --no-restore
        dotnet build TaskManagement.Infrastructure/TaskManagement.Infrastructure.csproj --configuration Release --no-restore
        dotnet build TaskManagement.API/TaskManagement.API.csproj --configuration Release --no-restore
        dotnet build TaskManagement.AuthService/TaskManagement.AuthService.csproj --configuration Release --no-restore
        dotnet build TaskManagement.ReminderService/TaskManagement.ReminderService.csproj --configuration Release --no-restore
      
    - name: Run tests
      run: |
        cd src
        dotnet test TaskManagement.API/TaskManagement.API.csproj --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" || echo "No tests in API project"
        dotnet test TaskManagement.AuthService/TaskManagement.AuthService.csproj --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" || echo "No tests in AuthService project"
        dotnet test TaskManagement.ReminderService/TaskManagement.ReminderService.csproj --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" || echo "No tests in ReminderService project"
        dotnet test TaskManagement.Application/TaskManagement.Application.csproj --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" || echo "No tests in Application project"
        dotnet test TaskManagement.Infrastructure/TaskManagement.Infrastructure.csproj --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" || echo "No tests in Infrastructure project"
      continue-on-error: true
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: '**/TestResults/**/*'
        retention-days: 30
        
  docker-build:
    name: Docker Build Validation
    runs-on: ubuntu-latest
    needs: build-and-test
    if: always()
    
    strategy:
      matrix:
        service: 
          - name: api
            dockerfile: TaskManagement.API/Dockerfile
            context: src
          - name: auth
            dockerfile: TaskManagement.AuthService/Dockerfile  
            context: src
          - name: reminder
            dockerfile: TaskManagement.ReminderService/Dockerfile
            context: src
          - name: frontend
            dockerfile: Dockerfile
            context: src/TaskManagement.Frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image for ${{ matrix.service.name }}
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service.context }}
        file: ${{ matrix.service.context }}/${{ matrix.service.dockerfile }}
        push: false
        tags: task-management-${{ matrix.service.name }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
  docker-compose-test:
    name: Docker Compose Integration Test
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create environment file
      run: |
        cd src
        cat > .env << EOF
        ASPNETCORE_ENVIRONMENT=Development
        JWT_SECRET_KEY=test-secret-key-for-ci-cd-pipeline-validation-only
        JWT_ISSUER=TaskManagementAPI
        JWT_AUDIENCE=TaskManagementClient
        JWT_EXPIRATION_MINUTES=1440
        MONGO_INITDB_ROOT_USERNAME=admin
        MONGO_INITDB_ROOT_PASSWORD=password123
        RABBITMQ_DEFAULT_USER=taskuser
        RABBITMQ_DEFAULT_PASS=taskpass
        EOF
        
    - name: Build and start services
      run: |
        cd src
        docker-compose build --parallel
        docker-compose up -d mongodb rabbitmq redis
        
    - name: Wait for dependencies
      run: |
        cd src
        echo "Waiting for MongoDB to be ready..."
        timeout 60 bash -c 'until docker-compose exec -T mongodb mongosh --eval "db.adminCommand({ping: 1})" > /dev/null 2>&1; do sleep 2; done' || true
        echo "Waiting for RabbitMQ to be ready..."
        timeout 60 bash -c 'until docker-compose logs rabbitmq | grep "Server startup complete"; do sleep 2; done'
        echo "Waiting for Redis to be ready..."
        timeout 30 bash -c 'until docker-compose exec -T redis redis-cli ping | grep PONG; do sleep 2; done'
        
    - name: Start application services
      run: |
        cd src
        docker-compose up -d task-management-auth task-management-api
        
    - name: Wait for services to be healthy
      run: |
        cd src
        echo "Waiting for Auth Service..."
        timeout 90 bash -c 'until curl -f http://localhost:5001/api/auth/health > /dev/null 2>&1; do sleep 5; done' || true
        echo "Waiting for API Service..."  
        timeout 90 bash -c 'until curl -f http://localhost:5000/api/health > /dev/null 2>&1; do sleep 5; done' || true
        
    - name: Run basic health checks
      run: |
        cd src
        echo "=== Checking service logs ==="
        docker-compose logs --tail=20 task-management-auth
        docker-compose logs --tail=20 task-management-api
        echo "=== Testing service endpoints ==="
        curl -f http://localhost:5001/api/auth/health || echo "Auth service health check failed"
        curl -f http://localhost:5000/api/health || echo "API service health check failed"
        
    - name: Cleanup
      if: always()
      run: |
        cd src
        docker-compose down -v
        docker system prune -f
        
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Install dotnet format
      run: dotnet tool install -g dotnet-format || true
      
    - name: Check code formatting
      run: |
        cd src
        dotnet format TaskManagement.Domain/TaskManagement.Domain.csproj --verify-no-changes --verbosity diagnostic || echo "Code formatting issues found in Domain"
        dotnet format TaskManagement.Application/TaskManagement.Application.csproj --verify-no-changes --verbosity diagnostic || echo "Code formatting issues found in Application"
        dotnet format TaskManagement.Infrastructure/TaskManagement.Infrastructure.csproj --verify-no-changes --verbosity diagnostic || echo "Code formatting issues found in Infrastructure"
        dotnet format TaskManagement.API/TaskManagement.API.csproj --verify-no-changes --verbosity diagnostic || echo "Code formatting issues found in API"
        dotnet format TaskManagement.AuthService/TaskManagement.AuthService.csproj --verify-no-changes --verbosity diagnostic || echo "Code formatting issues found in AuthService"
        dotnet format TaskManagement.ReminderService/TaskManagement.ReminderService.csproj --verify-no-changes --verbosity diagnostic || echo "Code formatting issues found in ReminderService"
        
    - name: Run code analysis
      run: |
        cd src
        dotnet build TaskManagement.Domain/TaskManagement.Domain.csproj --configuration Release --verbosity normal
        dotnet build TaskManagement.Application/TaskManagement.Application.csproj --configuration Release --verbosity normal
        dotnet build TaskManagement.Infrastructure/TaskManagement.Infrastructure.csproj --configuration Release --verbosity normal
        dotnet build TaskManagement.API/TaskManagement.API.csproj --configuration Release --verbosity normal
        dotnet build TaskManagement.AuthService/TaskManagement.AuthService.csproj --configuration Release --verbosity normal
        dotnet build TaskManagement.ReminderService/TaskManagement.ReminderService.csproj --configuration Release --verbosity normal